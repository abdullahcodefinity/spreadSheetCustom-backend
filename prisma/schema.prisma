generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SheetPermissionType {
  addColumn
  deleteColumn
  updateColumn
  addRow
  deleteRow
  updateRow
}

model User {
  id           Int              @id @default(autoincrement())
  name         String
  email        String           @unique
  password     String
  role         String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @default(now())
  userSheets   UserSheet[]
  // Removed: permissions  UserPermission[]
}

model Sheet {
  id              Int               @id @default(autoincrement())
  name            String
  columns         String[]
  columnsMeta     Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  userSheets      UserSheet[]
  sheetData       SheetData[]
  columnDropdowns ColumnDropdown[]
}

model UserSheet {
  id         Int               @id @default(autoincrement())
  userId     Int
  sheetId    Int
  role       String
  sheet      Sheet             @relation(fields: [sheetId], references: [id])
  user       User              @relation(fields: [userId], references: [id])
  permissions SheetPermission[] // âœ… Normalized permissions per sheet

  @@unique([userId, sheetId])
}

model SheetPermission {
  id           Int                @id @default(autoincrement())
  userSheet    UserSheet          @relation(fields: [userSheetId], references: [id])
  userSheetId  Int
  type         SheetPermissionType

  @@unique([userSheetId, type]) // One type per user per sheet
}

model SheetData {
  id            Int      @id @default(autoincrement())
  spreadsheetId Int
  position      Int
  row           Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  sheet         Sheet     @relation(fields: [spreadsheetId], references: [id])

  @@unique([spreadsheetId, position])
}

model ValueSet {
  id              Int               @id @default(autoincrement())
  name            String
  values          String[]
  columnDropdowns ColumnDropdown[]
}

model ColumnDropdown {
  id          Int      @id @default(autoincrement())
  columnName  String
  sheetId     Int
  valueSetId  Int

  sheet       Sheet     @relation(fields: [sheetId], references: [id])
  valueSet    ValueSet  @relation(fields: [valueSetId], references: [id])

  @@unique([sheetId, columnName])
}